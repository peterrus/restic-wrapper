#!/usr/bin/env bash

# @TODO:
# - rewrite to use try/catch pattern (use trap)

# Exit the script as soon as something fails.
# If you care about unexpected script failures you should configure your
# systems MTA for cron (https://unix.stackexchange.com/questions/505453/why-does-cron-require-mta-for-logging)
# Restic failures during actions (as defined in 'enabled_actions') will be sent to the notification script
# regardless.
set -e

function date_now {
    date "+%Y-%m-%d %H:%M:%S"
}

function date_now_safe {
    date "+%Y%m%d-%H%M%S"
}

function show_help {
    cat <<EOF
restic_wrapper -b <backup_name> -a backup
  Creates a snapshot (backup)

restic_wrapper -b <backup_name> -a backup-full
  All in one action that:
    - creates a snapshot
    - purges old snapshots
    - checks repository integrity

restic_wrapper -b <backup_name> -a run -r "<restic command + parameters>"
  Directly run restic command, env file gets sourced. For example a 
  value for -r could be:
  - "snapshots" to get a list of snapshots in this repository
  - "help" to see Restic's documentation.
  - "mount my_mountpoint" to mount a repository as a virtual filesystem.
  - "restore latest -t my_restore" to restore the latest snapshot to a directory called 'my_restore'.
  Make sure to enclose the full parameter to option -r in double quotes to properly pass it to restic!

restic_wrapper -a export-config
  Bundles all config files into a tarball in the current directory.
  Please keep this copy in a safe place as you will need it in a disaster
  recovery scenario and because it contains the private keys for
  your backups.
EOF
}

##################
### Parse args ###
##################
SCRIPT=`realpath $0`
SCRIPTPATH=`dirname $SCRIPT`

while getopts mb:a:r: arg; do
  case $arg in
    m) NOTIFICATION_ENABLED="true" ;;
    b) BACKUP_NAME=$OPTARG ;;
    a) ACTION=$OPTARG ;;
    r) RUN_PARAMETERS=$OPTARG ;;
  esac
done

[[ -z "$BACKUP_NAME" && "$ACTION" != "export-config" ]] && { echo "[ERROR] -b (backup name) argument not given"; show_help; exit 1; }
[[ -z "$ACTION" && "$ACTION" != "export-config" ]] && { echo "[ERROR] -a (action) argument not given"; show_help; exit 1; }
[[ "$ACTION" == "run" && -z "$RUN_PARAMETERS" ]] && { echo "[ERROR] -r (run arguments) argument not given"; show_help; exit 1; }

### end parse args ###

#######################################
### source and initialize variables ###
#######################################
if [[ "$ACTION" != "export-config" ]]; then
    source $SCRIPTPATH/$BACKUP_NAME.env
    RESTIC_EXCLUDE_FILE=$SCRIPTPATH/$BACKUP_NAME.excludefile
    LOGFILE=/tmp/restic_wrapper_log_$BACKUP_NAME-`date_now_safe`.log
fi

# Needed because https://github.com/restic/restic/pull/3069
export GODEBUG='asyncpreemptoff=1'
### end source and initialize variables ###

### definition of actions ###
function export-config {
    ARCHIVE_NAME=restic_wrapper-configs-`date_now_safe`.tar.gz
    tar cf $ARCHIVE_NAME *.env *.excludefile
    echo "Configs exported to $ARCHIVE_NAME. Please keep this file safe and don't lose it!"
}

function backup {
    restic \
        --exclude-file        $RESTIC_EXCLUDE_FILE \
        backup                $RESTIC_SOURCE
}

function backup-full {
    echo -e "[wrapper][`date_now`] Starting backup process"

    echo -e "\n\n[wrapper][`date_now`] Creating snapshot"
    restic \
        --exclude-file        $RESTIC_EXCLUDE_FILE \
        backup                $RESTIC_SOURCE
    
    echo -e "\n\n[wrapper][`date_now`] Purging old snapshots"
    restic forget --prune -c \
        --keep-daily 		14 \
        --keep-weekly		8 \
        --keep-monthly	    6 \
        --keep-yearly       5 \
        --keep-tag keep

    echo -e "\n\n[wrapper][`date_now`] Checking repository integrity"
    restic check

    echo -e "\n\n[wrapper][`date_now`] All tasks completed succesfully"
}

# For running arbitrary restic commands. Sources the config files for you.
function run {
    restic $RUN_PARAMETERS
}
### end definition of actions ###

################################
### main program starts here ###
################################

# register enabled actions (bash functions, see below) here
enabled_actions=("export-config run backup backup-full")

# check if the user inputted action is a valid action (a function is defined
# and it's name is added to the 'enabled_actions' array and then run it
if [[ " ${enabled_actions[*]} " =~ " ${ACTION} " ]]; then
    if [[ "$NOTIFICATION_ENABLED" == "true" ]]; then
        # run it and redirect all output to logfile
        if $ACTION &> $LOGFILE; then
            RESULT="OK"
        else
            RESULT="FAIL"
        fi
        # send logfile to notification script
		cat $LOGFILE | $SCRIPTPATH/restic_notify "Restic - $BACKUP_NAME $ACTION $RESULT"
        
        rm $LOGFILE
    else
        # just run it and send output to console
        $ACTION
    fi
else
    # value was $action was not found in in enabled_actions, show help
    show_help
    exit 1
fi

